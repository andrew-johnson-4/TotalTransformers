import $"preludes/l1.tlc";

type ArithAtom = /^[-]?[0-9]+$/;
               | f"({x:ArithAdd})";
type MulOp     = /^[*/%]$/;
type AddOp     = /^[+-]$/;
type ArithMul = f"{x:ArithAtom}{op:MulOp}{y:ArithMul}"
              | f"{x:ArithAtom}";
type ArithAdd = f"{x:ArithMul}{op:AddOp}{y:ArithAdd}"
              | f"{x:ArithMul}";

let expr: String = match argv() {
   ("eval", expr) => eval(expr),
   _ => {
      print("help");
      print("\teval [expr]");
      exit(0); ""
   },
};

let eval(s: String): Integer {
   //The "as" conversion here actually does the heavy lifting of parsing
   //This syntax is just sugar for the function call `$"as"(expr):ArithAdd`
   match expr as ArithAdd {
      f"{x:ArithMul}+{y:ArithAdd}" => { x + y },
      f"{x:ArithMul}-{y:ArithAdd}" => { x - y },
      f"{x:ArithAtom}*{y:ArithMul}" => { x * y },
      f"{x:ArithAtom}/{y:ArithMul}" => { x / y },
      f"{x:ArithAtom}%{y:ArithMul}" => { x % y },
      f"({x:ArithAdd})" => { x },
      /^[-]?[0-9]+$/ as x => { x as Integer },
   }
};

//This code does not work yet on latest LSTS
//Several minor features are needed for this to work
//The only major feature needed here is CFG substructural pattern matching
